# Generated by Django 5.0.6 on 2024-05-23 15:51

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PromotionConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promotion_type', models.CharField(choices=[('standard', 'Стандарт'), ('premium', 'Премиум'), ('top', 'Топ')], max_length=20, unique=True)),
                ('cost_per_day', models.FloatField()),
                ('discount_7_days', models.FloatField(default=0.1)),
                ('discount_14_days', models.FloatField(default=0.15)),
                ('discount_30_days', models.FloatField(default=0.2)),
            ],
        ),
        migrations.CreateModel(
            name='RentDayAdvertisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=15)),
                ('account_type', models.CharField(choices=[('individual', 'Individual'), ('professional', 'Professional')], default='individual', max_length=20)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_users', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_users', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_type', models.CharField(choices=[('owner', 'Собственник'), ('agent', 'Агент')], default='owner', max_length=20)),
                ('Тип сделки', models.CharField(default='Продажа', max_length=40)),
                ('Тип недвижимости', models.CharField(default='Жилая', max_length=50)),
                ('Объект', models.CharField(choices=[('flat', 'Квартира'), ('new_flat', 'Квартира в новостройке'), ('room', 'Комната'), ('part_flat', 'Доля в квартире'), ('house', 'Дом'), ('cottege', 'Коттедж'), ('tanhouse', 'Танхаус'), ('part_house', 'Часть дома'), ('spot', 'Участок')], default='owner', max_length=100)),
                ('Адресс', models.CharField(max_length=400)),
                ('Ближайшая остановка', models.CharField(max_length=400)),
                ('Минут до остановки', models.CharField(max_length=400)),
                ('transport', models.CharField(choices=[('afoot', 'Пешком'), ('car', 'Транспорт')], default='afoot', max_length=20)),
                ('count_rooms', models.CharField(choices=[('Atelier', 'Студия'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6+', '6'), ('free_layout', 'Свободная планировка')], max_length=20)),
                ('Общая площадь', models.PositiveIntegerField()),
                ('Жилая площадь', models.PositiveIntegerField()),
                ('Кухня', models.PositiveIntegerField()),
                ('property_type', models.CharField(choices=[('flat', 'Квартира'), ('apartment', 'Апартаменты')], max_length=30)),
                ('photo', models.ImageField(upload_to='images/')),
                ('Видео', models.CharField(max_length=300)),
                ('Балконы', models.PositiveIntegerField(default=0)),
                ('Лоджия', models.PositiveIntegerField(default=0)),
                ('view_from_window', models.CharField(choices=[('outside', 'На улицу'), ('into_the_courtyard', 'Во двор')], max_length=30)),
                ('Раздельный', models.PositiveIntegerField(default=0)),
                ('Совмещенный', models.PositiveIntegerField(default=0)),
                ('repair', models.CharField(choices=[('without_repair', 'Без ремонта'), ('cosmetic', 'Космитический'), ('euro', 'Евро'), ('disigner', 'Дизайнерский')], max_length=70)),
                ('Пассажирский', models.PositiveIntegerField(default=0)),
                ('Грузовой', models.PositiveIntegerField(default=0)),
                ('entrance', models.CharField(choices=[('ramp', 'Пандус'), ('garbage_chute', 'Мусоропровод')], max_length=30)),
                ('parking', models.CharField(choices=[('ground', 'Наземная'), ('multilevel', 'Многоуровневая'), ('underground', 'Подземная'), ('in_roof', 'На крыше')], max_length=30)),
                ('Загаловок', models.CharField(max_length=100)),
                ('Описание', models.TextField()),
                ('Номер телефона', models.CharField(max_length=30)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promotion_type', models.CharField(choices=[('standard', 'Стандарт'), ('premium', 'Премиум'), ('top', 'Топ')], default='standard', max_length=20)),
                ('duration', models.PositiveIntegerField(choices=[(1, 'Посуточно'), (7, '7 дней'), (14, '14 дней'), (30, '30 дней')])),
                ('config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='estatemaster.promotionconfig')),
            ],
        ),
        migrations.CreateModel(
            name='RentLongAdvertisement',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='estatemaster.basemodel')),
                ('floor', models.PositiveIntegerField()),
                ('floors_house', models.PositiveIntegerField()),
                ('Номер квартиры', models.CharField(blank=True, max_length=30, null=True)),
                ('rent_per_month', models.FloatField()),
                ('shetchik', models.CharField(choices=[('owner', 'Собственник'), ('tenant', 'Арендатор')], max_length=70)),
                ('prepayment', models.CharField(choices=[('for_month', 'За месяц'), ('1', '1'), ('2', '2'), ('3', '3'), ('4+', '4+')], max_length=70)),
                ('deposit', models.FloatField(blank=True, null=True)),
                ('rental_period', models.CharField(choices=[('few_months', 'Несколько месяцев'), ('from_the_year', 'От года')], max_length=70)),
                ('living_baby', models.BooleanField()),
                ('living_animal', models.BooleanField()),
                ('Дополнительный номер телефона', models.CharField(blank=True, max_length=30, null=True)),
                ('communication_method', models.CharField(choices=[('calls_and_messages', 'Звонки и сообщения'), ('whatsapp', 'WhatsApp'), ('only_calls', 'Только звонки')], max_length=70)),
                ('without_mebel', models.BooleanField(blank=True, null=True)),
                ('mebel_kitchen', models.BooleanField(blank=True, null=True)),
                ('mebel_rooms', models.BooleanField(blank=True, null=True)),
                ('bathroom_vanna', models.BooleanField(blank=True, null=True)),
                ('bathroom_doosh', models.BooleanField(blank=True, null=True)),
                ('split', models.BooleanField(blank=True, null=True)),
                ('holodilnik', models.BooleanField(blank=True, null=True)),
                ('tv', models.BooleanField(blank=True, null=True)),
                ('posud_car', models.BooleanField(blank=True, null=True)),
                ('stiral_car', models.BooleanField(blank=True, null=True)),
                ('internet', models.BooleanField(blank=True, null=True)),
                ('phone_house', models.BooleanField(blank=True, null=True)),
                ('promotion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='estatemaster.promotion')),
            ],
            bases=('estatemaster.basemodel',),
        ),
        migrations.CreateModel(
            name='ResidentialSaleListing',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='estatemaster.basemodel')),
                ('floor', models.PositiveIntegerField()),
                ('floors_house', models.PositiveIntegerField()),
                ('Номер квартиры', models.CharField(max_length=30)),
                ('age_build', models.PositiveIntegerField()),
                ('Высота потолков', models.PositiveIntegerField()),
                ('type_house', models.CharField(choices=[('brick', 'Кирпичный'), ('monolithic', 'Монолитный'), ('panel', 'Панельный'), ('block', 'Блочный'), ('wooden', 'Деревянный')], max_length=20)),
                ('price', models.FloatField()),
                ('currency', models.CharField(choices=[('mzn', 'MZN'), ('usd', 'Доллар'), ('eur', 'Евро')], default='mzn', max_length=3)),
                ('ipoteka', models.CharField(choices=[('perhaps', 'Возможно'), ('no', 'Нет')], max_length=30)),
                ('how_sell', models.CharField(choices=[('only_sell', 'Только продаю'), ('barter', 'Одновременно покупаю другую')], max_length=30)),
                ('Whatsapp', models.CharField(max_length=30)),
                ('promotion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='estatemaster.promotion')),
            ],
            bases=('estatemaster.basemodel',),
        ),
    ]
